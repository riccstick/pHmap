#!/bin/bash
#
# ARG_POSITIONAL_INF([ph_values],[sequence of space seperated values; from 0.00 to 14.00;\npH values to process]))
# ARG_OPTIONAL_SINGLE([pdb],[p],[input pdb file])
# ARG_OPTIONAL_SINGLE([ligand],[l],[input mol2 file])
# ARG_OPTIONAL_SINGLE([set_view],[s],[imports view settings from file; input file must contain\nthe PyMol output of the get_view command!])

# ARG_OPTIONAL_SINGLE([level],[],[level of pos and neg charge representation\n],[5])
# ARG_OPTIONAL_SINGLE([rampcolors],[],[colors for ramp; 3 colors comma seperated\n],[red, white, blue])
# ARG_OPTIONAL_BOOLEAN([surface_above],[],[surface_ramp_above_mode from PyMol\n],[on])

# ARG_OPTIONAL_BOOLEAN([axis_update],[],[updates only the pH numbers of the x-axis\n])
# ARG_OPTIONAL_SINGLE([digits],[],[digits of pH values in axis; if pH values like 5.25 change to 2!\n],[1])
# ARG_OPTIONAL_SINGLE([font],[],[font of the axis; type <convert -list font>\nto get a full list of fonts available\n],[Helvetica])
# ARG_OPTIONAL_SINGLE([fontsize],[],[font size],[40])
# ARG_OPTIONAL_SINGLE([weight],[],[font weight; type  <convert -list weight>\n to get a list of available weight settings\n],[Normal])
# ARG_OPTIONAL_SINGLE([stretch],[],[font stretch; type  <convert -list stretch>\n to get a list of available stretch settings\n],[Normal])
# ARG_OPTIONAL_SINGLE([style],[],[font style; type  <convert -list style>\n to get a list of available style settings\n],[Normal])

# ARG_OPTIONAL_SINGLE([alignment],[],[alignment of the axis text: West, Center, East\n],[Center])
# ARG_OPTIONAL_SINGLE([size],[],[individual picture size: default means 500x500 pixel (quadratic; 300 dpi)\n],[500])
# ARG_OPTIONAL_SINGLE([background],[],[background color: None, colors e.g. white, black])

# ARG_HELP([+-------+\n| pHmap |\n+-------+\nby Erik Breslmayr, 2020\n \npHmap uses pdb2pqr, apbs to calcualte electrostatic surface potentials,\nwhich are visualized by generating 2D pictures with PyMol. Several pH\nvalues can be processed and will be combined into one figure. As x-Axis\nof the picture pH-profile the pH values will be added.\n])
# ARG_VERSION([echo $0 v1.1])
# ARG_OPTIONAL_REPEATED([include],[I],[Directory for temporary folder],['/tmp'])

# ARGBASH_GO()
# needed because of Argbash --> m4_ignore([
### START OF CODE GENERATED BY Argbash v2.10.0 one line above ###
# Argbash is a bash code generator used to get arguments parsing right.
# Argbash is FREE SOFTWARE, see https://argbash.io for more info


die()
{
	local _ret="${2:-1}"
	test "${_PRINT_HELP:-no}" = yes && print_help >&2
	echo "$1" >&2
	exit "${_ret}"
}


begins_with_short_option()
{
	local first_option all_short_options='plshvI'
	first_option="${1:0:1}"
	test "$all_short_options" = "${all_short_options/$first_option/}" && return 1 || return 0
}

# THE DEFAULTS INITIALIZATION - POSITIONALS
_positionals=()
_arg_ph_values=()
# THE DEFAULTS INITIALIZATION - OPTIONALS
_arg_pdb=
_arg_ligand=
_arg_set_view=
_arg_level="5"
_arg_rampcolors="red, white, blue"
_arg_surface_above="on"
_arg_axis_update="off"
_arg_digits="1"
_arg_font="Helvetica"
_arg_fontsize="40"
_arg_weight="Normal"
_arg_stretch="Normal"
_arg_style="Normal"
_arg_alignment="Center"
_arg_size="500"
_arg_background=
_arg_include=('/tmp')


print_help()
{
	printf '%s\n' "+-------+
| pHmap |
+-------+
by Erik Breslmayr, 2020

pHmap uses pdb2pqr, apbs to calcualte electrostatic surface potentials,
which are visualized by generating 2D pictures with PyMol. Several pH
values can be processed and will be combined into one figure. As x-Axis
of the picture pH-profile the pH values will be added.
"
	printf 'Usage: %s [-p|--pdb <arg>] [-l|--ligand <arg>] [-s|--set_view <arg>] [--level <arg>] [--rampcolors <arg>] [--(no-)surface_above] [--(no-)axis_update] [--digits <arg>] [--font <arg>] [--fontsize <arg>] [--weight <arg>] [--stretch <arg>] [--style <arg>] [--alignment <arg>] [--size <arg>] [--background <arg>] [-h|--help] [-v|--version] [-I|--include <arg>] [<ph_values-1>] ... [<ph_values-n>] ...\n' "$0"
	printf '\t%s\n' "<ph_values>: sequence of space seperated values; from 0.00 to 14.00;
		pH values to process"
	printf '\t%s\n' "-p, --pdb: input pdb file (no default)"
	printf '\t%s\n' "-l, --ligand: input mol2 file (no default)"
	printf '\t%s\n' "-s, --set_view: imports view settings from file; input file must contain
		the PyMol output of the get_view command! (no default)"
	printf '\t%s\n' "--level: level of pos and neg charge representation
		 (default: '5')"
	printf '\t%s\n' "--rampcolors: colors for ramp; 3 colors comma seperated
		 (default: 'red, white, blue')"
	printf '\t%s\n' "--surface_above, --no-surface_above: surface_ramp_above_mode from PyMol
		 (on by default)"
	printf '\t%s\n' "--axis_update, --no-axis_update: updates only the pH numbers of the x-axis
		 (off by default)"
	printf '\t%s\n' "--digits: digits of pH values in axis; if pH values like 5.25 change to 2!
		 (default: '1')"
	printf '\t%s\n' "--font: font of the axis; type <convert -list font>
		to get a full list of fonts available
		 (default: 'Helvetica')"
	printf '\t%s\n' "--fontsize: font size (default: '40')"
	printf '\t%s\n' "--weight: font weight; type  <convert -list weight>
		 to get a list of available weight settings
		 (default: 'Normal')"
	printf '\t%s\n' "--stretch: font stretch; type  <convert -list stretch>
		 to get a list of available stretch settings
		 (default: 'Normal')"
	printf '\t%s\n' "--style: font style; type  <convert -list style>
		 to get a list of available style settings
		 (default: 'Normal')"
	printf '\t%s\n' "--alignment: alignment of the axis text: West, Center, East
		 (default: 'Center')"
	printf '\t%s\n' "--size: individual picture size: default means 500x500 pixel (quadratic; 300 dpi)
		 (default: '500')"
	printf '\t%s\n' "--background: background color: None, colors e.g. white, black (no default)"
	printf '\t%s\n' "-h, --help: Prints help"
	printf '\t%s\n' "-v, --version: Prints version"
	printf '\t%s' "-I, --include: Directory for temporary folder (default array elements:"
	printf " '%s'" '/tmp'
	printf ')\n'
}


parse_commandline()
{
	_positionals_count=0
	while test $# -gt 0
	do
		_key="$1"
		case "$_key" in
			-p|--pdb)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_pdb="$2"
				shift
				;;
			--pdb=*)
				_arg_pdb="${_key##--pdb=}"
				;;
			-p*)
				_arg_pdb="${_key##-p}"
				;;
			-l|--ligand)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_ligand="$2"
				shift
				;;
			--ligand=*)
				_arg_ligand="${_key##--ligand=}"
				;;
			-l*)
				_arg_ligand="${_key##-l}"
				;;
			-s|--set_view)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_set_view="$2"
				shift
				;;
			--set_view=*)
				_arg_set_view="${_key##--set_view=}"
				;;
			-s*)
				_arg_set_view="${_key##-s}"
				;;
			--level)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_level="$2"
				shift
				;;
			--level=*)
				_arg_level="${_key##--level=}"
				;;
			--rampcolors)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_rampcolors="$2"
				shift
				;;
			--rampcolors=*)
				_arg_rampcolors="${_key##--rampcolors=}"
				;;
			--no-surface_above|--surface_above)
				_arg_surface_above="on"
				test "${1:0:5}" = "--no-" && _arg_surface_above="off"
				;;
			--no-axis_update|--axis_update)
				_arg_axis_update="on"
				test "${1:0:5}" = "--no-" && _arg_axis_update="off"
				;;
			--digits)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_digits="$2"
				shift
				;;
			--digits=*)
				_arg_digits="${_key##--digits=}"
				;;
			--font)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_font="$2"
				shift
				;;
			--font=*)
				_arg_font="${_key##--font=}"
				;;
			--fontsize)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_fontsize="$2"
				shift
				;;
			--fontsize=*)
				_arg_fontsize="${_key##--fontsize=}"
				;;
			--weight)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_weight="$2"
				shift
				;;
			--weight=*)
				_arg_weight="${_key##--weight=}"
				;;
			--stretch)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_stretch="$2"
				shift
				;;
			--stretch=*)
				_arg_stretch="${_key##--stretch=}"
				;;
			--style)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_style="$2"
				shift
				;;
			--style=*)
				_arg_style="${_key##--style=}"
				;;
			--alignment)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_alignment="$2"
				shift
				;;
			--alignment=*)
				_arg_alignment="${_key##--alignment=}"
				;;
			--size)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_size="$2"
				shift
				;;
			--size=*)
				_arg_size="${_key##--size=}"
				;;
			--background)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_background="$2"
				shift
				;;
			--background=*)
				_arg_background="${_key##--background=}"
				;;
			-h|--help)
				print_help
				exit 0
				;;
			-h*)
				print_help
				exit 0
				;;
			-v|--version)
				echo $0 v1.1
				exit 0
				;;
			-v*)
				echo $0 v1.1
				exit 0
				;;
			-I|--include)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_include+=("$2")
				shift
				;;
			--include=*)
				_arg_include+=("${_key##--include=}")
				;;
			-I*)
				_arg_include+=("${_key##-I}")
				;;
			*)
				_last_positional="$1"
				_positionals+=("$_last_positional")
				_positionals_count=$((_positionals_count + 1))
				;;
		esac
		shift
	done
}


assign_positional_args()
{
	local _positional_name _shift_for=$1
	_positional_names=""
	_our_args=$((${#_positionals[@]} - 0))
	for ((ii = 0; ii < _our_args; ii++))
	do
		_positional_names="$_positional_names _arg_ph_values[$((ii + 0))]"
	done

	shift "$_shift_for"
	for _positional_name in ${_positional_names}
	do
		test $# -gt 0 || break
		eval "$_positional_name=\${1}" || die "Error during argument parsing, possibly an Argbash bug." 1
		shift
	done
}

parse_commandline "$@"
assign_positional_args 1 "${_positionals[@]}"

# OTHER STUFF GENERATED BY Argbash

### END OF CODE GENERATED BY Argbash (sortof) ### ])
# [ <-- needed because of Argbash


## Variables
SECONDS=0
TEMP="$_arg_include"
WPATH="$(pwd)"

### arguments var
if [[ -z "$_arg_set_view" ]]; then
    view=" "
else
    view=$(cat $_arg_set_view)
fi
#### pH range
pHmin=$(printf "%.${_arg_digits}f" ${_arg_ph_values[0]}) # pH values
pHinc=$(printf "%.${_arg_digits}f" ${_arg_ph_values[1]}) # increment for range with digits to choose
pHmax=$(printf "%.${_arg_digits}f" ${_arg_ph_values[2]}) # pH values

for i in `seq $pHmin $pHinc $pHmax`; do
    pHrange=$(printf "%.${_arg_digits}f\n" $pHrange $i)
done
#### pymol settings
if [ $_arg_surface_above = "off" ]; then
    above_mode=" "
else
    above_mode="set surface_ramp_above_mode"
fi
#### convert settings
axisPageSize=$(echo $_arg_fontsize*1.25 | bc) # axispagehighnes is 1.25 times higher then fontsize
backGround="$_arg_background" # background color
if [[ -z "$backGround" ]]; then
    backGroundTrans="off"
    backGround="None"
else
    backGroundTrans="on"
fi

## Functions
timeNeed () {
ELAPSED="$(($SECONDS / 3600))hrs $((($SECONDS / 60) % 60))min $(($SECONDS % 60))sec"
printf "|%-30s%30s|\n" "Program finished within:" "$ELAPSED"
}

check () {
#checks if pdb file is given

if [[ -z "$_arg_pdb" ]]; then
	printf "$emptyFormat" "       !no pdb file given!"
	printf "$emptyFormat" "      pHmap -h for help!"
else
    runScript
fi
}

picGen () {

for i in $pHrange; do
    pdb2pqr --with-ph=$i --ph-calc-method=propka --drop-water --apbs-input --ff=parse --verbose --ligand=$_arg_ligand $_arg_pdb $i-p2p.pqr
    sleep 1s
    apbs --output-file=$i-apbs.log $i-p2p.in
    sleep 1s

    printf "
load $i-p2p.pqr.dx
load $i-p2p.pqr
as surface
ramp_new ramp, $i-p2p.pqr, [-$_arg_level, 0, $_arg_level], [$_arg_rampcolors]
set surface_color, ramp
$above_mode
disable ramp
$view
center
zoom
set opaque_background, $backGroundTrans
bg_color $backGround
png $i-pic.png, width=$_arg_size, height=$_arg_size, dpi=300" > rendering.pml

    pymol -cq rendering.pml
done
}

numGen () {
for i in $pHrange; do
    convert -size ${_arg_size}x$axisPageSize -gravity $_arg_alignment -background  $backGround -weight $_arg_weight -stretch $_arg_stretch -style $_arg_style -pointsize $_arg_fontsize -family $_arg_font label:$i $WPATH/$i-number.png
done
}


picCombine () {
list=$(ls -tr $WPATH/*-pic.png)
convert +append $list pH_profile_pic.png
list=$(ls -tr $WPATH/*-number.png)
convert +append $list pH_profile_number.png
convert -append pH_profile_pic.png pH_profile_number.png pH_profile.png

}

cleanUp () {
#cleans up the directory
mkdir p2pFiles >/dev/null 2>/dev/null
mkdir logFiles >/dev/null 2>/dev/null
mkdir pngFiles >/dev/null 2>/dev/null

mv *-apbs.log logFiles >/dev/null 2>/dev/null
mv *p2p* p2pFiles >/dev/null 2>/dev/null
mv *-pic.png pngFiles >/dev/null 2>/dev/null
mv *-number.png pngFiles >/dev/null 2>/dev/null
rm io.mc >/dev/null 2>/dev/null
}

## SCRIPT
runScript () {
if [ $_arg_axis_update = "on" ]; then
    WPATH=$(echo $WPATH/pngFiles)
    rm $WPATH/*-number.png >/dev/null 2>/dev/null
    numGen
    picCombine
else
    picGen
    numGen
    picCombine
fi
cleanUp
timeNeed
}
check
# ] <-- needed because of Argbash
