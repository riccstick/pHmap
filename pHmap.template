#!/bin/bash
#
# ARG_POSITIONAL_INF([pdb], [pdb files to process)], [1])
# ARG_POSITIONAL_DOUBLEDASH()

# ARG_OPTIONAL_SINGLE([ph_range],[r],[range of pH's in quotes!; 'start stop step' e.g. '5 7 0.5'])
# ARG_OPTIONAL_SINGLE([ligand],[l],[input mol2 file])
# ARG_OPTIONAL_SINGLE([set_view],[s],[imports view settings from file; input file must contain\nthe PyMol output of the get_view command!])

# ARG_OPTIONAL_SINGLE([level], ,[level of pos and neg charge representation\n], [5])
# ARG_OPTIONAL_SINGLE([rampcolors], ,[colors for ramp; 3 colors comma seperated\n], [red, white, blue])
# ARG_OPTIONAL_BOOLEAN([surface_above], ,[surface_ramp_above_mode from PyMol\n], [on])

# ARG_OPTIONAL_BOOLEAN([axis_update], ,[updates only the pH numbers of the x-axis\n])
# ARG_OPTIONAL_SINGLE([digits], ,[digits of pH values in axis; if pH values like 5.25 change to 2!\n], [1])
# ARG_OPTIONAL_SINGLE([font], ,[font of the axis; type <convert -list font>\nto get a full list of fonts available\n], [Helvetica])
# ARG_OPTIONAL_SINGLE([fontsize], ,[font size], [40])
# ARG_OPTIONAL_SINGLE([weight], ,[font weight; type  <convert -list weight>\n to get a list of available weight settings\n], [Normal])
# ARG_OPTIONAL_SINGLE([stretch], ,[font stretch; type  <convert -list stretch>\n to get a list of available stretch settings\n], [Normal])
# ARG_OPTIONAL_SINGLE([style], ,[font style; type  <convert -list style>\n to get a list of available style settings\n], [Normal])

# ARG_OPTIONAL_BOOLEAN([ramp], ,[enable/disable ramp\n], [on])
# ARG_OPTIONAL_SINGLE([xalign], ,[x-axis alignment of the pH value text; type  <convert -list gravity>\n to get a list of available alignment settings\n], [Center])
# ARG_OPTIONAL_SINGLE([yalign], ,[y-axis alignment of the label text; type  <convert -list gravity>\n to get a list of available alignment settings\n], [Center])
# ARG_OPTIONAL_SINGLE([size], ,[individual picture size: default means 500x500 pixel (quadratic; 300 dpi)\n], [500])
# ARG_OPTIONAL_SINGLE([background], ,[background color: None, colors e.g. white, black])

# ARG_HELP([+-------+\n| pHmap |\n+-------+\nby Erik Breslmayr, 2020\n \npHmap uses pdb2pqr, apbs to calcualte electrostatic surface potentials,\nwhich are visualized by generating 2D pictures with PyMol. Several pH's\nand pdb files can be processed and will be combined into one figure. On\nthe x-axis the pH's and on the y-axis the filenames will be added.\n \nExamples:\npHmap protein.pdb mutant.pdb -r '4 7 0.5' -l ligand.mol2 -s set_view.txt\npHmap protein.pdb mutant.pdb -r '4 7 0.5' -l ligand.mol2 -s set_view.txt --axis_update --font Helvetica --fontsize 60\npHmap protein.pdb mutant.pdb -r '4 7 0.25' -l ligand.mol2 -s set_view.txt --digits 2\n])
# ARG_VERSION([echo $0 v2.0_beta])
# ARG_OPTIONAL_REPEATED([include],[I],[Directory for temporary folder],['/tmp'])
# ARGBASH_GO

# [ <-- needed because of Argbash
## Variables
SECONDS=0
TEMP="$_arg_include"
WPATH="$(pwd)"

### arguments var
#### ligandFlag
if [[ -n "$_arg_ligand" ]]; then
    ligandFlag=$(echo --ligand=$_arg_ligand)
fi

#### set_view
if [[ -z "$_arg_set_view" ]]; then
    view=" "
else
    view=$(cat $_arg_set_view)
fi
#### range
rangeMin=$(echo ${_arg_ph_range} | cut -d " " -f 1)
rangeMax=$(echo ${_arg_ph_range} | cut -d " " -f 2)
rangeInc=$(echo ${_arg_ph_range} | cut -d " " -f 3)
pHmin=$(printf "%.${_arg_digits}f" $rangeMin) # pH values
pHinc=$(printf "%.${_arg_digits}f" $rangeInc) # increment for range with digits to choose
pHmax=$(printf "%.${_arg_digits}f" $rangeMax) # pH values

for i in `seq $pHmin $pHinc $pHmax`; do 
    pHrange=$(printf "%.${_arg_digits}f\n" $pHrange $i)
done >/dev/null 2>/dev/null
#### pymol settings
if [ $_arg_surface_above = "off" ]; then
    above_mode=" "
else
    above_mode="set surface_ramp_above_mode"
fi
#### convert settings
axisPageSize=$(echo $_arg_fontsize*1.25 | bc -l) # axispagehighnes is 1.25 times higher then fontsize
backGround="$_arg_background" # background color
if [[ -z "$backGround" ]]; then
    backGroundTrans="off"
    backGround="None"
else
    backGroundTrans="on"
fi

## Functions
timeNeed () {
ELAPSED="$(($SECONDS / 3600))hrs $((($SECONDS / 60) % 60))min $(($SECONDS % 60))sec"
printf "|%-30s%30s|\n\n" "Program finished within:" "$ELAPSED"
}

check () {
#checks if pdb file is given
if [[ -z "$rangeMin" ]] && [[ -z "$rangeMax" ]] && [[ -z "$rangeInc" ]]; then
	printf "\n|%-60s|\n" "                   error in -r, --ph_range"
	printf "|%-60s|\n\n" "                     pHmap -h for help!"
else
    runScript
fi
}

picGen () {
for l in ${_arg_pdb[*]}; do
    printf "|%-30s%30s|\n" "Processing file:" "$l"
    label=$(echo $l | cut -d "." -f 1)
    for i in $pHrange; do
        printf "|%5s%-35s%20s|\n" "" "Running pdb2pqr @" "pH $i"
        pdb2pqr --with-ph=$i --ph-calc-method=propka --drop-water --apbs-input --ff=parse $ligandFlag $l $label-$i-p2p.pqr > $label-p2p-stout.log 2> $label-p2p-sterr.log
        sleep 1s
        printf "|%5s%-35s%20s|\n" "" "Running apbs @" "pH $i"
        apbs --output-file=$label-$i-apbs.log $label-$i-p2p.in > $label-apbs-stout.log 2> $label-apbs-sterr.log
        sleep 1s
    
        printf " 
load $label-$i-p2p.pqr.dx
load $label-$i-p2p.pqr
as surface
show sticks, hetatm
ramp_new ramp, $label-$i-p2p.pqr, [-$_arg_level, 0, $_arg_level], [$_arg_rampcolors]
set surface_color, ramp
$above_mode
disable ramp
$view
center
zoom
set opaque_background, $backGroundTrans
bg_color $backGround
png $label-$i-pic.png, width=$_arg_size, height=$_arg_size, dpi=300
hide everything
enable ramp
png rawRamp.png, width=$_arg_size, height=$_arg_size, dpi=300"> rendering.pml
        
        printf "|%5s%-35s%20s|\n" "" "Rendering figure with PyMol @" "pH $i"
        pymol -cq rendering.pml > $label-pymol-stout.log 2> $label-pymol-sterr.log
    done
    list=$(ls -tr $WPATH/$label-*-pic.png)
    convert +append $list $label-pH_profile_pic.png    
done
}    

numGen () {
for i in $pHrange; do
    convert -size ${_arg_size}x$axisPageSize -gravity $_arg_xalign -background  $backGround -weight $_arg_weight -stretch $_arg_stretch -style $_arg_style -pointsize $_arg_fontsize -family $_arg_font label:$i $WPATH/$i-number.png
done
}

labelGen () {
for i in ${_arg_pdb[*]}; do
    label=$(echo $i | cut -d "." -f 1)
    convert -size ${_arg_size}x${_arg_size} -gravity $_arg_yalign -background  $backGround -weight $_arg_weight -stretch $_arg_stretch -style $_arg_style -pointsize $_arg_fontsize -family $_arg_font label:$label $WPATH/$label-label.png
done
}

emptyGen () {
    convert -size ${_arg_size}x$axisPageSize xc:None empty.png
}
rampGen () {
    rampWidthFactor=$(echo $_arg_size/500 | bc -l) # 500 is default --size flag!!!
    rampHigh=$(echo $axisPageSize*$rampWidthFactor | bc -l)
    offset=$(echo $rampHigh/4.545454545 | bc -l) # from fontsize 40 comes 50 for axisPageSize and 11 is needed as offset, therefore 50/11 as factor to center ramp.
    
    convert rawRamp.png -gravity South -crop ${_arg_size}x${rampHigh}+0+$offset -gravity Center -resize ${_arg_size}x$rampHigh -background $backGround -compose Copy -extent ${_arg_size}x$rampHigh ramp.png
    
    ### bug in empty and x axis if higher size!!!
}

picCombine () {
printf "\n|%-60s|\n" "Generating final figure and cleaning up"
#xaxis
list=$(ls -tr $WPATH/*-number.png)
convert +append $list xaxis_number.png
#yaxis
list=$(ls -tr $WPATH/*-label.png)
if [ $_arg_ramp = "on" ]; then
    convert -append $list ramp.png yaxis_label.png

else
    convert -append $list empty.png yaxis_label.png
fi
#pic and xaxis
list=$(ls -tr *-pH_profile_pic.png)
convert -append $list xaxis_number.png pH_profile.png
#pic, xaxis and yaxis
convert +append yaxis_label.png pH_profile.png pH_profile+label.png
}

cleanUp () {
#cleans up the directory
mkdir p2pFiles >/dev/null 2>/dev/null
mkdir logFiles >/dev/null 2>/dev/null
mkdir pngFiles >/dev/null 2>/dev/null

mv *.log logFiles >/dev/null 2>/dev/null
mv *p2p* p2pFiles >/dev/null 2>/dev/null
mv *-pic.png pngFiles >/dev/null 2>/dev/null
mv *-number.png pngFiles >/dev/null 2>/dev/null
mv *-label.png pngFiles >/dev/null 2>/dev/null
rm io.mc >/dev/null 2>/dev/null
}

## SCRIPT 
runScript () {
date=$(date)
printf "\n|%-30s%30s|\n\n" "pHmap started @" "$date"


if [ $_arg_axis_update = "on" ]; then
    # only run convert
    WPATH=$(echo $WPATH/pngFiles)
    rm $WPATH/*-number.png >/dev/null 2>/dev/null
    rm $WPATH/*-label.png >/dev/null 2>/dev/null
    numGen
    labelGen
    emptyGen
    rampGen
    picCombine
else
    picGen
    numGen
    labelGen
    emptyGen
    rampGen
    picCombine
fi
cleanUp
timeNeed
}
check
# ] <-- needed because of Argbash
